<?php

namespace Proxies\__CG__\SoniaBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Event extends \SoniaBundle\Entity\Event implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'id', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'nomEvent', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'typeEvent', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'description', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'dateEvent', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'placeEvent', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'nbParticipants', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'theme', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'destination', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'award', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'budget', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'price', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'users'];
        }

        return ['__isInitialized__', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'id', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'nomEvent', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'typeEvent', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'description', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'dateEvent', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'placeEvent', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'nbParticipants', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'theme', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'destination', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'award', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'budget', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'price', '' . "\0" . 'SoniaBundle\\Entity\\Event' . "\0" . 'users'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Event $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function addEventUser(\AppBundle\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addEventUser', [$user]);

        return parent::addEventUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsers', []);

        return parent::getUsers();
    }

    /**
     * {@inheritDoc}
     */
    public function getAward()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAward', []);

        return parent::getAward();
    }

    /**
     * {@inheritDoc}
     */
    public function setAward($award)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAward', [$award]);

        return parent::setAward($award);
    }

    /**
     * {@inheritDoc}
     */
    public function getBudget()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBudget', []);

        return parent::getBudget();
    }

    /**
     * {@inheritDoc}
     */
    public function setBudget($budget)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBudget', [$budget]);

        return parent::setBudget($budget);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setNomEvent($nomEvent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNomEvent', [$nomEvent]);

        return parent::setNomEvent($nomEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function getNomEvent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNomEvent', []);

        return parent::getNomEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function setTypeEvent($typeEvent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTypeEvent', [$typeEvent]);

        return parent::setTypeEvent($typeEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function getTypeEvent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypeEvent', []);

        return parent::getTypeEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateEvent($dateEvent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateEvent', [$dateEvent]);

        return parent::setDateEvent($dateEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateEvent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateEvent', []);

        return parent::getDateEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function setPlaceEvent($placeEvent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPlaceEvent', [$placeEvent]);

        return parent::setPlaceEvent($placeEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function getPlaceEvent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlaceEvent', []);

        return parent::getPlaceEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function setNbParticipants($nbParticipants)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNbParticipants', [$nbParticipants]);

        return parent::setNbParticipants($nbParticipants);
    }

    /**
     * {@inheritDoc}
     */
    public function getNbParticipants()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNbParticipants', []);

        return parent::getNbParticipants();
    }

    /**
     * {@inheritDoc}
     */
    public function setTheme($theme)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTheme', [$theme]);

        return parent::setTheme($theme);
    }

    /**
     * {@inheritDoc}
     */
    public function getTheme()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTheme', []);

        return parent::getTheme();
    }

    /**
     * {@inheritDoc}
     */
    public function setDestination($destination)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDestination', [$destination]);

        return parent::setDestination($destination);
    }

    /**
     * {@inheritDoc}
     */
    public function getDestination()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDestination', []);

        return parent::getDestination();
    }

    /**
     * {@inheritDoc}
     */
    public function getPrice()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrice', []);

        return parent::getPrice();
    }

    /**
     * {@inheritDoc}
     */
    public function setPrice($price)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrice', [$price]);

        return parent::setPrice($price);
    }

    /**
     * {@inheritDoc}
     */
    public function notificationsOnCreate(\SBC\NotificationsBundle\Builder\NotificationBuilder $builder)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'notificationsOnCreate', [$builder]);

        return parent::notificationsOnCreate($builder);
    }

    /**
     * {@inheritDoc}
     */
    public function notificationsOnUpdate(\SBC\NotificationsBundle\Builder\NotificationBuilder $builder)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'notificationsOnUpdate', [$builder]);

        return parent::notificationsOnUpdate($builder);
    }

    /**
     * {@inheritDoc}
     */
    public function notificationsOnDelete(\SBC\NotificationsBundle\Builder\NotificationBuilder $builder)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'notificationsOnDelete', [$builder]);

        return parent::notificationsOnDelete($builder);
    }

}
